	2. Learn Basic CSS by Building a Café Menu
		• CSS tells the browser how to display your webpage. You can use CSS to set the color, font, size, and other aspects of HTML elements.
				□ The title is one of several elements that provide extra information not visible on the web page, but it is useful for search engines or how the page gets displayed.
				□ Up until now, you have been limited regarding the presentation and appearance of the content you create. To start taking control, add a style element within the head element.
				□ You can add style to an element by specifying it in the style element and setting a property for it like this:
				
				element {
				 property: value;
				}
				□ 
				□ You now have three type selectors with the exact same styling. You can add the same group of styles to many elements by creating a list of selectors. Each selector is separated with commas like this:
				
				selector1, selector2 {
				  property: value;
				}
				□ You need to link the styles.css file so the styles will be applied again. Nest a self-closing link element in the head element. Give it a rel attribute value stylesheet and an href attribute value of styles.css.
				□ For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a meta element with a special content attribute. Add the following within the head element:
				□ <meta name="viewport" content="width=device-width, initial-scale=1.0" />.
				□ The text is centered again so the link to the CSS file is working. Add another style to the file that changes the background-color property to brown for the body element.
				□ The div element is used mainly for design layout purposes unlike the other content elements you have used so far.  Add a div element inside the body element.
				□ The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this. You can use the id selector to target a specific element with an id attribute. An id selector is defined by placing the hash symbol # directly in front of the element's id value. For example, if an element has the id of cat then you would target that element like this:
				
				#cat {
				  width: 250px;
				}
				□ Comments in CSS look like this:
				
				/* comment here */
				
				□ Change the width property's value to be 80%, to make it 80% the width of its parent element (body).
				□ Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element.
				□ So far you have been using type and id selectors to style elements. However, it is more common to use a different selector to style your elements.
				
				A class selector is defined by a name with a dot directly in front of it, like this:
				
				.class-name {
				  styles
				}
				□ Since the cafe's main product for sale is coffee, you could use an image of coffee beans for the background of the page. Inside the body selector, add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).
				□ Time to start adding some menu items. Add an empty article element under the Coffee heading. It will contain a flavor and price of each coffee you currently offer.
				□ The article elements commonly contain multiple elements that have related information. In this case, it will contain a coffee flavor and a price for that flavor. Nest two p elements inside your article element. The first one's text should be French Vanilla, and the second's text 3.00.
				□ 
				□ That is kind of what you want, but now it would be nice if the flavor and price were on the same line. p elements are block-level elements, so they take up the entire width of their parent element.
				
				To get them on the same line, you need to apply some styling to the p elements so they behave more like inline elements. To do that, start by adding a class attribute with the value item to the first article element under the Coffee heading.
				□ The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this:
				
				.item p { }
				Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.
				□ 
				
				□ That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.
													w 
			
			
			
			
			
				Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, 
				
				causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%.
				
				Change the width value to 49% for each class to see what happens.
				□ 
			
				□ That worked, but there is still a little space on the right of the price.
				□ 
				You could keep trying various percentages for the widths. Instead, use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor so that they are on the same line in the editor. Make sure there is no space between them.
				□ Now go ahead and change both the flavor and price class' widths to be 50% again.
				
			
				□ If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the p elements on the left side can only take up 50% of the space.
				
				Since you know the prices on the right have significantly fewer characters, change the flavor class width value to be 75% and the price class width value to be 25%.
				
				□ The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.
				
				Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.
				
				□ You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.
				
				Change all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable.
				□ It is a bit boring for all the text to have the same font-family. You can still have the majority of the text sans-serif and make just the h1 and h2 elements different using a different selector.
				
				Style both the h1 and the h2 elements using a single selector so that these elements' text use Impact font.
				
				□ The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers.
				
				Add two new type selectors (h1 and h2). Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.
				□ You can use an hr element to display a divider between sections of different content.
				□ Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. By changing the border to the same color as the background, the total height of the line is 5px (3px plus the top and bottom border width of 1px).
				□ The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.
				
				To make the footer links the same color regardless if a link has been visited, use a type selector for the anchor element (a) and use the value black for the color property.
				□ You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.
				□ You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.
				□ You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.
				
				□ The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements.
				
				□ To make the image behave like heading elements (which are block-level), create an img type selector and use the value block for the display property and use the applicable margin-left and margin-right values to center it horizontally.
				It would be nice if the vertical space between the h2 elements and their associated icons was smaller. The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number.
				
				There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. Negative values are created using a - in front of the value. To complete this project, go ahead and use a negative top margin of 25px in the img type selector.
